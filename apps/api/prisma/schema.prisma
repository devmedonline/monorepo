generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// A user is a user that can login to the app
model User {
  id               String            @id @unique
  email            String            @unique
  password         String
  name             String
  avatar           String            @default("/assets/images/avatars/default.png")
  auth             Auth?
  posts            Post[]
  history          HistoryAction[]
  permissions      Permission[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bans             Ban[]
  simulations      Simulation[]
  simulationPhases SimulationPhase[]
}

model Ban {
  id                String    @id @unique
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  banReason         String
  banTimestamp      DateTime  @default(now())
  unBanTimestamp    DateTime?
  banDurationInDays Int?
}

// Auth is the authentication model that is used to keep track of the user's tokens
model Auth {
  id           String   @id @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  accessToken  String
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// A permission is a permission that is given to a user to do something (post:read, post:write, etc)
model Permission {
  id        String   @id @unique
  resource  String
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

// A general category is a generic category that can be used for any type of post / other stuff | most of the time it will be some system of the body
model GeneralCategory {
  id              String   @id @unique
  name            String
  description     String
  publicAvailable Boolean  @default(false)
  posts           Post[]
  thumbnail       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// A post is like a blog post or a news article but most of the time in the app it will be an medical article
model Post {
  id                String           @id @unique
  title             String
  content           String
  thumbnail         String?
  author            User             @relation(fields: [authorId], references: [id])
  authorId          String           @unique
  language          String
  publicAvailable   Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  generalCategory   GeneralCategory? @relation(fields: [generalCategoryId], references: [id])
  generalCategoryId String?
}

// To keep track of all the actions that are being done by the user for audit purposes (action: "post:read", "post:write", etc)
model HistoryAction {
  id        String   @id @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// A simulation category is a category that can be used for simulations | most of the time it will be some drug or some disease
model SimulationCategory {
  id              String       @id @unique
  name            String
  description     String
  publicAvailable Boolean      @default(false)
  thumbnail       String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  simulations     Simulation[]
}

model Simulation {
  id                   String              @id @unique
  title                String
  content              String
  thumbnail            String?
  author               User                @relation(fields: [authorId], references: [id])
  authorId             String              @unique
  language             String
  publicAvailable      Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  simulationCategory   SimulationCategory? @relation(fields: [simulationCategoryId], references: [id])
  simulationCategoryId String?
  simulationPhases     SimulationPhase[]
}

model SimulationPhase {
  id              String     @id @unique
  position        Int
  title           String
  content         String
  thumbnail       String?
  author          User       @relation(fields: [authorId], references: [id])
  authorId        String     @unique
  language        String
  publicAvailable Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  simulation      Simulation @relation(fields: [simulationId], references: [id])
  simulationId    String
}
